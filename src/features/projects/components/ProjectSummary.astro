---
import { Image } from "astro:assets";
import Container from "@components/Container.astro";
import { getWorkPeriod } from "../lib/dates";
import type { Project } from "../lib/types";
import LinkButton from "@components/LinkButton.astro";
import TextLink from "@components/TextLink.astro";

type Props = { project: Project };

const { project } = Astro.props;

const { title, longDescription, stack, slug, startDate, endDate, url } =
  project;

// Make sure we're optimising portfolio screenshots,
// because some of them are >2MB.
const { default: loadedImage } = await import(`../images/${slug}.png`);
---

<Container>
  <project-summary
    class="grid lg:grid-cols-2 xl:grid-cols-project-summary gap-8"
  >
    <ul
      class="bg-grey-1 px-4 py-8 rounded-lg border space-y-8 place-self-start w-full order-1 lg:order-first"
    >
      <li>
        <TextLink
          as="a"
          href="/projects"
          color="blue"
          class="before:content-['_←'] after:content-none pt-0"
        >
          Back to projects
        </TextLink>
      </li>
      <li>
        <h2 class="text-xl text-blue-light mb-1">Project title</h2>
        <p>{title}</p>
      </li>
      <li class="relative">
        <h2 class="text-xl text-blue-light mb-1">About</h2>
        <article class="space-y-4 leading-relaxed line-clamp-4">
          {longDescription.map((paragraph) => <p class="">{paragraph}</p>)}
        </article>
        <div
          class="bg-gradient-to-t from-grey-1 from-25% to-transparent absolute w-full pt-16 bottom-0"
        >
          <TextLink
            as="button"
            class="w-full flex items-center after:content-none"
            color="blue"
          >
            <span
              >Read more <span class="sr-only">about my work on {title}</span
              ></span
            >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="w-4 h-4 ml-1 mt-1"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
            </svg>
          </TextLink>
        </div>
      </li>
      <li>
        <h2 class="text-xl text-blue-light mb-1">Tech stack</h2>
        <ul class="flex flex-wrap">
          {
            stack.map((tech) => (
              <li class="text-base mr-2 mb-2 bg-grey-3 rounded-md px-2">
                {tech}
              </li>
            ))
          }
        </ul>
      </li>
      <li>
        <h2 class="text-xl text-blue-light mb-1">Work period</h2>
        <p>{getWorkPeriod(startDate, endDate)}</p>
      </li>
      <li>
        <LinkButton color="blue" href={url} target="_blank" class="w-full">
          <span>Visit website <span class="sr-only">for {title}</span></span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-4 h-4 ml-1"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25"></path>
          </svg>
        </LinkButton>
      </li>
    </ul>
    <Image
      alt={`A screenshot of the ${title} website`}
      class="rounded-lg border bg-grey-1"
      src={loadedImage}
      widths={[240, 540, 720, 1280]}
      loading="eager"
      quality={100}
    />
  </project-summary>
</Container>

<style>
  img,
  project-summary > ul {
    box-shadow: 4px 4px 0px theme(colors.grey.5);
  }
</style>

<script>
  class ProjectSummary extends HTMLElement {
    private readMore: HTMLButtonElement | null;
    private content: HTMLElement | null;
    private wrapper: HTMLLIElement | null;
    private buttonText: Record<"open" | "closed", string>;

    constructor() {
      super();

      this.readMore = this.querySelector("button");
      this.content = this.querySelector("article");
      this.wrapper = this.querySelector("li.relative");

      this.buttonText = {
        open:
          this.readMore?.innerHTML
            .replace("more", "less")
            .replace("w-4 h-4 ml-1", "w-4 h-4 ml-1 rotate-180") ?? "Read less",
        closed: this.readMore?.innerHTML ?? "Read more",
      };

      this.readMore?.addEventListener("click", () => this.toggle());
    }

    private toggle() {
      const isClosed = this.content?.classList.contains("line-clamp-4");

      isClosed ? this.show() : this.hide();
    }

    private show() {
      this.wrapper?.classList.add("pb-8");
      this.content?.classList.remove("line-clamp-4");
      this.readMore?.parentElement?.classList.remove(
        "from-grey-1",
        "from-25%",
        "to-transparent",
        "pt-16"
      );

      if (this.readMore) {
        this.readMore.innerHTML = this.buttonText.open;
      }
    }

    private hide() {
      this.wrapper?.classList.remove("pb-8");
      this.content?.classList.add("line-clamp-4");
      this.readMore?.parentElement?.classList.add(
        "from-grey-1",
        "from-25%",
        "to-transparent",
        "pt-16"
      );

      if (this.readMore) {
        this.readMore.innerHTML = this.buttonText.closed;
      }
    }
  }

  customElements.define("project-summary", ProjectSummary);
</script>
