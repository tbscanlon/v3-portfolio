---
import { Image } from "astro:assets";
import Container from "@components/Container.astro";
import { getWorkPeriod } from "../lib/dates";
import type { ProjectSummary } from "../lib/types";
import LinkButton from "@components/LinkButton.astro";
import Button from "@components/Button.astro";
import TextLink from "@components/TextLink.astro";

type Props = ProjectSummary;

const {
  title,
  stack,
  url,
  description,
  longDescription,
  startDate,
  endDate,
  image,
} = Astro.props;

// Make sure we're optimising portfolio screenshots.
const { default: loadedImage } = await import(`../images/${image}.png`);
---

<Container>
  <project-summary
    class="grid lg:grid-cols-2 xl:grid-cols-project-summary gap-8"
  >
    <ul
      class="bg-grey-1 px-4 py-8 rounded-lg border space-y-8 place-self-start w-full order-1 lg:order-first"
    >
      <li>
        <TextLink
          as="a"
          href="/projects"
          color="blue"
          class="before:content-['_←'] after:content-none text-base pt-0"
        >
          Back to projects
        </TextLink>
      </li>
      <li>
        <h2 class="text-xl text-blue-light mb-1">Project title</h2>
        <p>{title}</p>
      </li>
      <li>
        <h2 class="text-xl text-blue-light mb-1">Summary</h2>
        <p>{description}</p>
      </li>
      <li>
        <h2 class="text-xl text-blue-light mb-1">Tech stack</h2>
        <ul class="flex flex-wrap">
          {
            stack.map((tech) => (
              <li class="text-base mr-2 mb-2 bg-grey-3 rounded-md px-2">
                {tech}
              </li>
            ))
          }
        </ul>
      </li>
      <li>
        <h2 class="text-xl text-blue-light mb-1">Work Period</h2>
        <p>{getWorkPeriod(startDate, endDate)}</p>
      </li>
      <li class="grid grid-cols-12 gap-4">
        <LinkButton
          color="blue"
          href={url}
          target="_blank"
          class="col-span-full sm:col-span-6 2xl:col-span-7"
        >
          <span>Visit website <span class="sr-only">for {title}</span></span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-4 h-4 ml-1"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25"></path>
          </svg>
        </LinkButton>
        <Button
          color="grey"
          class="col-span-full sm:col-span-6 2xl:col-span-5 flex items-center justify-center"
        >
          <span
            >Read more <span class="sr-only">about my work on {title}</span
            ></span
          >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-4 h-4 ml-1"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
          </svg>
        </Button>
      </li>
      <li id="expanded" class="hidden">
        <article class="space-y-4 leading-relaxed">
          {longDescription.map((paragraph) => <p class="">{paragraph}</p>)}
        </article>
      </li>
    </ul>
    <Image
      alt={`A screenshot of the ${title} website`}
      class="rounded-lg border bg-grey-1"
      src={loadedImage}
      widths={[240, 540, 720, 1280]}
      loading="eager"
      quality={100}
    />
  </project-summary>
</Container>

<style>
  img,
  project-summary > ul {
    box-shadow: 4px 4px 0px theme(colors.grey.5);
  }
</style>

<script>
  class ProjectSummary extends HTMLElement {
    private readMore: HTMLButtonElement | null;
    private content: HTMLElement | null;
    private buttonText: Record<"open" | "closed", string>;

    constructor() {
      super();

      this.readMore = this.querySelector("button");
      this.content = this.querySelector("#expanded");

      this.buttonText = {
        open:
          this.readMore?.innerHTML
            .replace("more", "less")
            .replace("w-4 h-4 ml-1", "w-4 h-4 ml-1 rotate-180") ?? "Read less",
        closed: this.readMore?.innerHTML ?? "Read more",
      };

      this.readMore?.addEventListener("click", () => this.toggle());
    }

    private toggle() {
      const isClosed = this.content?.classList.contains("hidden");

      isClosed ? this.show() : this.hide();
    }

    private show() {
      this.content?.classList.remove("hidden");

      if (this.readMore) {
        this.readMore.innerHTML = this.buttonText.open;
      }
    }

    private hide() {
      this.content?.classList.add("hidden");

      if (this.readMore) {
        this.readMore.innerHTML = this.buttonText.closed;
      }
    }
  }

  customElements.define("project-summary", ProjectSummary);
</script>
